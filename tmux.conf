#Powerline
#source /usr/share/powerline/bindings/tmux/powerline.conf
set-option -g default-terminal "screen-256color"

unbind C-b
set -g prefix C-a
bind C-a send prefix
#Enable full mouse support.
set -g mouse on
#===commands from tmux2 book
#===set the base index for windows to 1 instead of 0
set -g base-index 1
set -g pane-base-index 1

bind r source-file ~/.tmux.conf \; display "Reloaded!"

unbind C-b
# colors for pane borders
#setw -g pane-border-style fg=green,bg=black
#setw -g pane-active-border-style fg=white,bg=yellow

#acive pane normal, other shaded out
#setw -g window-style fg=colour240,bg=colour235
#setw -g window-active-style fg=white,bg=black

# Command / message line
#set -g message-style fg=white, bold,bg=black
set-option -g status-right " #P "
##################################################
# thoughtbout Chris Toomey -setting
##################################################
bind-key - split-window -v -c '#{pane_current_path}'
bind-key \ split-window -h -c '#{pane_current_path}'

bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-UP resize-pane -U 1

bind -n C-Left resize-pane -L 10    
bind -n C-Right resize-pane -R 10
bind -n C-Down resize-pane -D 5
bind -n C-UP resize-pane -U 5

bind c new-window -c '#{pane_current_path}'
bind-key b break-pane -d 
bind-key o split-window -h "htop"
bind-key t split-window -h -c ~/ "vim todo.md"
bind-key w split-window -h -c ~/my-wiki "vim +CtrlP" 

#Chris Tomey tmux-advanced-workflow at 5 min
bind-key C-e split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# Prompted join-pane
bind-key C-i command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# Easily swap a pane (targeted by pane number) with the current pane
bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

bind-key C-b send-keys 'tat && exit' 'C-m'
bind-key C-k run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'









#####################################################

#smart pane switching with awareness of Vim splits. 
# See: https://github.com/christoomey/vim-tmux-navigator 
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'" 
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L' 
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D' 
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U' 
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R' 
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")' 
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'" 
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"  

bind-key -T copy-mode-vi 'C-h' select-pane -L 
bind-key -T copy-mode-vi 'C-j' select-pane -D 
bind-key -T copy-mode-vi 'C-k' select-pane -U 
bind-key -T copy-mode-vi 'C-l' select-pane -R 
bind-key -T copy-mode-vi 'C-\' select-pane -l

#------Copy Mode (Vim style-----------------
# vim keys in copy and choose mode
set-window-option -g mode-keys vi
#coping selection vim style:w
#http://jasonwrya.com/blog/2011/06/07/copy-and-paste-in-tmux/
bind-key p paste-buffer     # paste; (default hotkey: ] )
bind-key P choose-buffer    # tmux clipboard history
bind-key + delete-buffer \; display-message "Deleted current Tmux Clipboard History"

# Send to tux clipboard or system clipboard
bind-key < run-shell "tmux set-buffer -- \"$(xsel -o -b)\"" \; display-message "copy to tmux clipboard"
bind-key > run-shell 'tmux show-buffer | xsel -i -b' \; display-message "copy to system clipboard"

# Note: for Visual block mode > hit v then C-v to trigger it
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line     
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selectoin clipboard"
bind-key -T copy-mode-vi y send-keys -X copy-pipe "xlip -in -selection clipboard"




set -g @plugin 'tmux-plugins/tmux-resurrect'  
set -g @plugin 'tmux-plugins/tmux-continuum'  
# last saved environment is automatically restored when tmux is started.
set -g @continuum-restore 'on'


#let tundle manage tundle, required!
setenv -g @bundle "javier-lopez/tundle" #set -g can be used if tmux >= 1.8

#from GitHub, tundle-plugins
setenv -g @BUNDLE "gh:javier-lopez/tundle-plugins/tmux-sensible"
#options
setenv -g @plugin "javier-lopez/tundle-plugins/tmux-pain-control"
setenv -g @pane_resize "10"
setenv -g @PLUGIN "github:javier-lopez/tundle-plugins/tmux-copycat:master"
setenv -g @bundle "https://github.com/javier-lopez/tundle-plugins/tmux-yank"

#from GitHub, tmux-plugins
setenv -g @bundle "tmux-plugins/tmux-resurrect"
# initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run-shell "~/.tmux/plugins/tundle/tundle"









